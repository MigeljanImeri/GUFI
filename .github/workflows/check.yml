# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



name: Auxiliary Checks

on: [push, pull_request]

env:
  CC: clang
  CXX: clang++
  DEP_INSTALL_PREFIX: ~/.local
  COMMON_CONFIG: -DCMAKE_C_FLAGS="-Wall -Wextra -Werror -pedantic" -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror -pedantic" -DDEP_INSTALL_PREFIX="${DEP_INSTALL_PREFIX}" -DDEP_BUILD_THREADS=2 -DENABLE_SUDO_TESTS=On

jobs:
  ShellCheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install ShellCheck
      run:  sudo apt -y install shellcheck

    - name: Run ShellCheck
      run:  contrib/shellcheck.sh ${{ github.workspace }}

  Pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-pylint

    - name: Ubuntu Prerequisites
      run:  sudo contrib/CI/ubuntu.sh

    - name: Install Extra Python Packages
      run:  |
            sudo apt -y install python3-pip python3-matplotlib
            sudo pip3 install pylint

    - name: Configure CMake
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DCMAKE_BUILD_TYPE=Debug -DPRINT_CUMULATIVE_TIMES=On

    - name: Run Python3 Pylint
      working-directory: ${{ github.workspace }}/build
      run:  make pylint

  Older_CMake:
    needs: [ShellCheck, Pylint]
    runs-on: ubuntu-latest
    container:
      image: centos:8
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-cmake-3.1.0

    - name: CentOS 8 Prerequisites
      run:  contrib/CI/centos8.sh

    - name: Install wget
      run:  yum -y install wget

    - name: Uninstall CMake from package manager
      run:  yum -y autoremove cmake3

    - name: Install CMake 3.1.0
      run:  contrib/CI/cmake-download.sh 3.1.0 linux-x86_64 | tail -n 1 | sed 's/linux/Linux/g' >> "${GITHUB_PATH}"

    - name: Check CMake Version
      run:  cmake --version

    - name: Configure CMake
      run:  |
            mkdir -p build
            cd build
            cmake .. ${{ env.COMMON_CONFIG }}

    - name: Build
      working-directory: ${{ github.workspace }}/build
      run:  make -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run:  ctest --output-on-failure

  Python2:
    needs: [ShellCheck, Pylint]
    runs-on: ubuntu-latest
    container:
      image: centos:8
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-Python2

    - name: CentOS 8 Prerequisites
      run:  contrib/CI/centos8.sh

    - name: Install Python 2
      run:  yum -y install python2

    - name: Install Matplotlib
      run:  |
            yum -y install curl
            curl --insecure https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
            python2 get-pip.py
            python2 -m pip install --upgrade pip
            python2 -m pip install matplotlib

    - name: Configure CMake For Core Tests
      run:  |
            mkdir -p build
            cd build
            cmake .. ${{ env.COMMON_CONFIG }} -DPYTHON_INTERPRETER=python2

    - name: Build
      working-directory: ${{ github.workspace }}/build
      run:  make -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run:  ctest --output-on-failure

    - name: Configure CMake For Performance Package Tests
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DPYTHON_INTERPRETER=python2 -DCMAKE_BUILD_TYPE=Debug -DPRINT_CUMULATIVE_TIMES=On

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run:  ctest --output-on-failure -L performance_pkg

  TestDirectory:
    needs: [ShellCheck, Pylint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-test-directory

    - name: Ubuntu Prerequisites
      run:  sudo contrib/CI/ubuntu.sh

    - name: Configure CMake
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DTEST_WORKING_DIRECTORY=/tmp

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run:  ctest --output-on-failure

  DebugPrints:
    needs: [ShellCheck, Pylint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PRINT_CUMULATIVE_TIMES:    [ "On", "Off" ]
        PRINT_PER_THREAD_STATS:    [ "On", "Off" ]
        PRINT_QPTPOOL_QUEUE_SIZE:  [ "On", "Off" ]
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-debug-prints

    - name: Ubuntu Prerequisites
      run:  sudo contrib/CI/ubuntu.sh

    - name: Install matplotlib
      if:   matrix.PRINT_CUMULATIVE_TIMES == 'On'
      run:  |
            sudo apt -y install python3-pip
            python3 -m pip install matplotlib

    - name: Configure CMake
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DCMAKE_BUILD_TYPE=Debug -DPRINT_CUMULATIVE_TIMES=${{ matrix.PRINT_CUMULATIVE_TIMES }} -DPRINT_PER_THREAD_STATS=${{ matrix.PRINT_PER_THREAD_STATS }} -DPRINT_QPTPOOL_QUEUE_SIZE=${{ matrix.PRINT_QPTPOOL_QUEUE_SIZE }}

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      if: |
        matrix.PRINT_CUMULATIVE_TIMES   == 'On' ||
        matrix.PRINT_PER_THREAD_STATS   == 'On' ||
        matrix.PRINT_QPTPOOL_QUEUE_SIZE == 'On'
      run:  ctest --output-on-failure -L unit

    - name: Test
      working-directory: ${{ github.workspace }}/build
      if: |
        matrix.PRINT_CUMULATIVE_TIMES   == 'Off' &&
        matrix.PRINT_PER_THREAD_STATS   == 'Off' &&
        matrix.PRINT_QPTPOOL_QUEUE_SIZE == 'Off'
      run:  ctest --output-on-failure

  Memcheck:
    needs: [ShellCheck, Pylint]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-memcheck

    - name: Ubuntu Prerequisites
      run:  contrib/CI/ubuntu.sh

    - name: Install Valgrind
      run:  apt -y install valgrind

    - name: Configure CMake
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DCMAKE_BUILD_TYPE=Debug -DPRINT_CUMULATIVE_TIMES=On -DPRINT_PER_THREAD_STATS=On -DPRINT_QPTPOOL_QUEUE_SIZE=On

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Memcheck
      run:  |
            cd ${{ github.workspace }}/build
            valgrind --tool=memcheck --leak-check=full --track-origins=yes --show-leak-kinds=all --show-error-list=yes --track-fds=yes --gen-suppressions=all --suppressions=test/unit/googletest/valgrind.suppressions --error-exitcode=1 test/unit/googletest/unit_tests --gtest_color=yes

  WithoutJemalloc:
    needs: [ShellCheck, Pylint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-without-jemalloc

    - name: Ubuntu Prerequisites
      run:  sudo contrib/CI/ubuntu.sh

    - name: Configure CMake
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DDEP_USE_JEMALLOC=Off

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run:  ctest --output-on-failure
