$ gufi_ls --help
usage: gufi_ls [--help] [--version] [-a] [-A] [--block-size BLOCK_SIZE] [-B]
               [--full-time] [-G] [-h] [-i] [-l] [-r] [-R] [-s] [-S]
               [--time-style {full-iso,iso,locale,long-iso}] [-t] [--delim c]
               [--in-memory-name name] [--aggregate-name name]
               [--skip-file filename]
               [paths ...]

GUFI version of ls

positional arguments:
  paths

options:
  --help                show this help message and exit
  --version, -v         show program's version number and exit
  -a, --all             do not ignore entries starting with .
  -A, --almost-all      do not list implied . and ..
  --block-size BLOCK_SIZE
                        with -l, scale sizes by SIZE when printing them
  -B, --ignore-backups  do not list implied entries ending with ~
  --full-time           like -l --time-style=full-iso
  -G, --no-group        in a long listing, don't print group names
  -h, --human-readable  with -l and -s, print sizes like 1K 234M 2G etc.
  -i, --inode           print the index number of each file
  -l                    use a long listing format
  -r, --reverse         reverse order while sorting
  -R, --recursive       list subdirectories recursively
  -s, --size            print the allocated size of each file, in blocks
  -S                    sort by file size, largest first
  --time-style {full-iso,iso,locale,long-iso}
                        time/date format with -l
  -t                    sort by modification time, newest first
  --delim c             delimiter separating output columns
  --in-memory-name name
                        Name of in-memory database when aggregation is
                        performed
  --aggregate-name name
                        Name of final database when aggregation is performed
  --skip-file filename  Name of file containing directory basenames to skip

$ gufi_ls
1KB
1MB
directory
file_symlink
leaf_directory
old_file
repeat_name
unusual#? directory ,

$ gufi_ls -a
.hidden
1KB
1MB
directory
file_symlink
leaf_directory
old_file
repeat_name
unusual#? directory ,

$ gufi_ls -A
.hidden
1KB
1MB
directory
file_symlink
leaf_directory
old_file
repeat_name
unusual#? directory ,

$ gufi_ls -h
1KB
1MB
directory
file_symlink
leaf_directory
old_file
repeat_name
unusual#? directory ,

$ gufi_ls -i  | awk '{ print 0, $2 }'
0 1KB
0 1MB
0 directory
0 file_symlink
0 leaf_directory
0 old_file
0 repeat_name
0 unusual#?

$ gufi_ls -R
1KB
1MB
directory
directory/executable
directory/readonly
directory/subdirectory
directory/subdirectory/directory_symlink
directory/subdirectory/repeat_name
directory/writable
file_symlink
leaf_directory
leaf_directory/leaf_file1
leaf_directory/leaf_file2
old_file
repeat_name
unusual#? directory ,
unusual#? directory ,/unusual, name?#

$ gufi_ls -r
unusual#? directory ,
repeat_name
old_file
leaf_directory
file_symlink
directory
1MB
1KB

$ gufi_ls -s  | grep -v -e '.*directory.*' -e 'file_symlink' | awk '{ $1=0; print }'
0 1KB
0 1MB
0 old_file
0 repeat_name

$ gufi_ls -S  | grep -v '.*directory.*'
1MB
1KB
repeat_name
file_symlink
old_file

$ gufi_ls -t
1MB
1KB
unusual#? directory ,
repeat_name
leaf_directory
file_symlink
directory
old_file

$ gufi_ls -ar
unusual#? directory ,
repeat_name
old_file
leaf_directory
file_symlink
directory
1MB
1KB
.hidden

$ gufi_ls -arR
unusual#? directory ,/unusual, name?#
unusual#? directory ,
repeat_name
old_file
leaf_directory/leaf_file2
leaf_directory/leaf_file1
leaf_directory
file_symlink
directory/writable
directory/subdirectory/repeat_name
directory/subdirectory/directory_symlink
directory/subdirectory
directory/readonly
directory/executable
directory
1MB
1KB
.hidden

$ gufi_ls -Sr | grep -v '.*directory.*'
old_file
file_symlink
repeat_name
1KB
1MB

$ sqlite3 "db.db" "INSERT INTO entries (name) VALUES ('backup~');"

$ gufi_ls -B
1KB
1MB
directory
file_symlink
leaf_directory
old_file
repeat_name
unusual#? directory ,

$ sqlite3 "db.db" "DELETE FROM entries WHERE name == 'backup~';"

$ gufi_ls old_file --full-time
-rw-rw-r-- 1 user group 0 1970-01-01 00:00:00 +0000 old_file

$ gufi_ls old_file -l --time-style=full-iso
-rw-rw-r-- 1 user group 0 1970-01-01 00:00:00 +0000 old_file

$ gufi_ls old_file -l --time-style=long-iso
-rw-rw-r-- 1 user group 0 1970-01-01 00:00:00 old_file

$ gufi_ls old_file -l --time-style=iso
-rw-rw-r-- 1 user group 0 01-01 00:00 old_file

$ gufi_ls old_file -l --time-style=locale
-rw-rw-r-- 1 user group 0 Jan   1 00:00 old_file

$ gufi_ls old_file -l
-rw-rw-r-- 1 user group 0 Jan   1 00:00 old_file

$ gufi_ls old_file --time-style=full-iso
old_file

$ gufi_ls old_file --time-style=long-iso
old_file

$ gufi_ls old_file --time-style=iso
old_file

$ gufi_ls old_file --time-style=locale
old_file

$ gufi_ls -l --block-size=1000 1KB
-rw-rw-r-- 1 user group 2 Jan   1 00:00 1KB

$ gufi_ls -l --block-size=1024 1KB
-rw-rw-r-- 1 user group 1 Jan   1 00:00 1KB

$ gufi_ls -l --block-size=K    1KB
-rw-rw-r-- 1 user group 1K Jan   1 00:00 1KB

$ gufi_ls -l --block-size=1K   1KB
-rw-rw-r-- 1 user group 1 Jan   1 00:00 1KB

$ gufi_ls -l --block-size=KB   1KB
-rw-rw-r-- 1 user group 2KB Jan   1 00:00 1KB

$ gufi_ls -l --block-size=1KB  1KB
-rw-rw-r-- 1 user group 2 Jan   1 00:00 1KB

$ gufi_ls -l --block-size=KiB  1KB
-rw-rw-r-- 1 user group 1KiB Jan   1 00:00 1KB

$ gufi_ls -l --block-size=1KiB 1KB
-rw-rw-r-- 1 user group 1 Jan   1 00:00 1KB

$ gufi_ls --block-size=K    1KB
1KB

$ gufi_ls --block-size=1K   1KB
1KB

$ gufi_ls --block-size=KB   1KB
1KB

$ gufi_ls --block-size=1KB  1KB
1KB

$ gufi_ls --block-size=KiB  1KB
1KB

$ gufi_ls --block-size=1KiB 1KB
1KB

$ gufi_ls -lG old_file
-rw-rw-r-- 1 user 0 Jan   1 00:00 old_file

$ gufi_ls -G old_file
old_file

$ gufi_ls -lh 1KB
-rw-rw-r-- 1 user group 1.0K Jan   1 00:00 1KB

$ gufi_ls -lh 1MB
-rw-rw-r-- 1 user group 1.0M Jan   1 00:00 1MB

$ gufi_ls -h 1KB
1KB

$ gufi_ls -h 1MB
1MB

$ gufi_ls --block-size=YiB
usage: gufi_ls [--help] [--version] [-a] [-A] [--block-size BLOCK_SIZE] [-B]
               [--full-time] [-G] [-h] [-i] [-l] [-r] [-R] [-s] [-S]
               [--time-style {full-iso,iso,locale,long-iso}] [-t] [--delim c]
               [--in-memory-name name] [--aggregate-name name]
               [--skip-file filename]
               [paths ...]
gufi_ls: error: argument --block-size: Invalid --block-size argument: 'YiB'

$ gufi_ls --block-size=-
usage: gufi_ls [--help] [--version] [-a] [-A] [--block-size BLOCK_SIZE] [-B]
               [--full-time] [-G] [-h] [-i] [-l] [-r] [-R] [-s] [-S]
               [--time-style {full-iso,iso,locale,long-iso}] [-t] [--delim c]
               [--in-memory-name name] [--aggregate-name name]
               [--skip-file filename]
               [paths ...]
gufi_ls: error: argument --block-size: Invalid --block-size argument: '-'

$ gufi_ls --block-size=-1GB
usage: gufi_ls [--help] [--version] [-a] [-A] [--block-size BLOCK_SIZE] [-B]
               [--full-time] [-G] [-h] [-i] [-l] [-r] [-R] [-s] [-S]
               [--time-style {full-iso,iso,locale,long-iso}] [-t] [--delim c]
               [--in-memory-name name] [--aggregate-name name]
               [--skip-file filename]
               [paths ...]
gufi_ls: error: argument --block-size: Invalid --block-size argument: '-1GB'

$ gufi_ls --block-size=0GB
usage: gufi_ls [--help] [--version] [-a] [-A] [--block-size BLOCK_SIZE] [-B]
               [--full-time] [-G] [-h] [-i] [-l] [-r] [-R] [-s] [-S]
               [--time-style {full-iso,iso,locale,long-iso}] [-t] [--delim c]
               [--in-memory-name name] [--aggregate-name name]
               [--skip-file filename]
               [paths ...]
gufi_ls: error: argument --block-size: Invalid --block-size argument: '0GB'

$ gufi_ls --skip "skip"
1KB
1MB
file_symlink
leaf_directory
old_file
repeat_name
unusual#? directory ,

$ gufi_ls --skip "skip.bad"
Error: Cannot open skip file "skip.bad"
Error: Bad input skip list

