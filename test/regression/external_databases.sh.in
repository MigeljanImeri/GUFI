#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



set -e
source @CMAKE_CURRENT_BINARY_DIR@/setup.sh 0

OUTPUT="external_databases.out"

# common table name
TABLE="user_table"

# faction1 joins on name
FACTION1_DB="faction1.db"
FACTION1_CREATE_TABLE="CREATE TABLE ${TABLE}(name TEXT, type TEXT, pinode TEXT, external_data TEXT);"
FACTION1_TEMPLATE_DB="template.faction1"
FACTION1_TEMPLATE_ATTACH="faction1_empty"
FACTION1_VIEW="faction1_view"

# faction2 joins on type
FACTION2_DB="faction2.db"
FACTION2_CREATE_TABLE="CREATE TABLE ${TABLE}(name TEXT, type TEXT, pinode TEXT, external_data TEXT);"
FACTION2_TEMPLATE_DB="template.faction2"
FACTION2_TEMPLATE_ATTACH="faction2_empty"
FACTION2_VIEW="faction2_view"

cleanup() {
    rm -rf "${FACTION1_TEMPLATE_DB}" "${FACTION2_TEMPLATE_DB}"
}

cleanup_exit() {
    cleanup
    setup_cleanup
}

trap cleanup_exit EXIT

cleanup

(
do_tests() {
    echo "# get faction1 user data"
    echo "# SELECT rpath(), type, faction1 user data"
    run_sort "${GUFI_QUERY}" \
             "-d '|'" \
             "-I \"ATTACH '${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\"" \
             "-S \"SELECT rpath(vrsummary.sname, vrsummary.sroll), vrsummary.type, ${FACTION1_VIEW}.external_data FROM vrsummary LEFT JOIN ${FACTION1_VIEW} ON (vrsummary.name == ${FACTION1_VIEW}.name) AND (vrsummary.type == ${FACTION1_VIEW}.type);\"" \
             "-E \"SELECT rpath(vrpentries.sname, vrpentries.sroll) || '/' || vrpentries.name, vrpentries.type, ${FACTION1_VIEW}.external_data FROM vrpentries LEFT JOIN ${FACTION1_VIEW} ON (vrpentries.name == ${FACTION1_VIEW}.name) AND (vrpentries.type == ${FACTION1_VIEW}.type);\"" \
             "\"${INDEXROOT}\""

    echo "# again, but with xattrs"
    echo "# SELECT rpath(), type, xattr_name, xattr_value, faction1 user data"
    run_sort "${GUFI_QUERY}" \
             "-x" \
             "-d '|'" \
             "-I \"ATTACH '${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\"" \
             "-S \"SELECT rpath(vrxsummary.sname, vrxsummary.sroll), vrxsummary.type, vrxsummary.xattr_name, vrxsummary.xattr_value, ${FACTION1_VIEW}.external_data FROM vrxsummary LEFT JOIN ${FACTION1_VIEW} ON (vrxsummary.name == ${FACTION1_VIEW}.name) AND (vrxsummary.type == ${FACTION1_VIEW}.type);\"" \
             "-E \"SELECT rpath(vrxpentries.sname, vrxpentries.sroll) || '/' || vrxpentries.name, vrxpentries.type, vrxpentries.xattr_name, vrxpentries.xattr_value, ${FACTION1_VIEW}.external_data FROM vrxpentries LEFT JOIN ${FACTION1_VIEW} ON (vrxpentries.name == ${FACTION1_VIEW}.name) AND (vrxpentries.type == ${FACTION1_VIEW}.type);\"" \
             "\"${INDEXROOT}\""

    echo "# get faction2 user data"
    echo "# SELECT rpath(), type, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-d '|'" \
             "-I \"ATTACH '${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(vrsummary.sname, vrsummary.sroll), vrsummary.type, ${FACTION2_VIEW}.external_data FROM vrsummary LEFT JOIN ${FACTION2_VIEW} ON (vrsummary.name == ${FACTION2_VIEW}.name) AND (vrsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(vrpentries.sname, vrpentries.sroll) || '/' || vrpentries.name, vrpentries.type, ${FACTION2_VIEW}.external_data FROM vrpentries LEFT JOIN ${FACTION2_VIEW} ON (vrpentries.name == ${FACTION2_VIEW}.name) AND (vrpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${INDEXROOT}\""

    echo "# again, but with xattrs"
    echo "# SELECT rpath(), type, xattr_name, xattr_value, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-x" \
             "-d '|'" \
             "-I \"ATTACH '${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(vrxsummary.sname, vrxsummary.sroll), vrxsummary.type, vrxsummary.xattr_name, vrxsummary.xattr_value, ${FACTION2_VIEW}.external_data FROM vrxsummary LEFT JOIN ${FACTION2_VIEW} ON (vrxsummary.name == ${FACTION2_VIEW}.name) AND (vrxsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(vrxpentries.sname, vrxpentries.sroll) || '/' || vrxpentries.name, vrxpentries.type, vrxpentries.xattr_name, vrxpentries.xattr_value, ${FACTION2_VIEW}.external_data FROM vrxpentries LEFT JOIN ${FACTION2_VIEW} ON (vrxpentries.name == ${FACTION2_VIEW}.name) AND (vrxpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${INDEXROOT}\""

    echo "# get faction1 and faction2 user data at the same time"
    echo "# SELECT rpath(), type, faction1 user data, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-d '|'" \
             "-I \"ATTACH '${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}'; ATTACH '${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\" -Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(vrsummary.sname, vrsummary.sroll), vrsummary.type, ${FACTION1_VIEW}.external_data, ${FACTION2_VIEW}.external_data FROM vrsummary LEFT JOIN ${FACTION1_VIEW} ON (vrsummary.name == ${FACTION1_VIEW}.name) AND (vrsummary.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (vrsummary.name == ${FACTION2_VIEW}.name) AND (vrsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(vrpentries.sname, vrpentries.sroll) || '/' || vrpentries.name, vrpentries.type, ${FACTION1_VIEW}.external_data, ${FACTION2_VIEW}.external_data FROM vrpentries LEFT JOIN ${FACTION1_VIEW} ON (vrpentries.name == ${FACTION1_VIEW}.name) AND (vrpentries.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (vrpentries.name == ${FACTION2_VIEW}.name) AND (vrpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${INDEXROOT}\""

    echo "# again, but with xattrs"
    echo "# SELECT rpath(), type, xattr_name, xattr_value, faction1 user data, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-x" \
             "-d '|'" \
             "-I \"ATTACH '${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}'; ATTACH '${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\" -Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\" -Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(vrxsummary.sname, vrxsummary.sroll), vrxsummary.type, vrxsummary.xattr_name, vrxsummary.xattr_value, ${FACTION1_VIEW}.external_data, ${FACTION2_VIEW}.external_data FROM vrxsummary LEFT JOIN ${FACTION1_VIEW} ON (vrxsummary.name == ${FACTION1_VIEW}.name) AND (vrxsummary.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (vrxsummary.name == ${FACTION2_VIEW}.name) AND (vrxsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(vrxpentries.sname, vrxpentries.sroll) || '/' || vrxpentries.name, vrxpentries.type, vrxpentries.xattr_name, vrxpentries.xattr_value,${FACTION1_VIEW}.external_data, ${FACTION2_VIEW}.external_data FROM vrxpentries LEFT JOIN ${FACTION1_VIEW} ON (vrxpentries.name == ${FACTION1_VIEW}.name) and (vrxpentries.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (vrxpentries.name == ${FACTION2_VIEW}.name) AND (vrxpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${INDEXROOT}\""
}

run_no_sort "${GENERATETREE} \"${SRCDIR}\""

echo "# create in-source-tree user db files and fill in tables"
echo

# ${SRCDIR} has both faction1 and faction2 files
# ${SRCDIR}/directory has matches for the directory and a file
# ${SRCDIR}/directory/subdirectory has matches for the directory and a file
# ${SRCDIR}/leaf_directory has a faction1 db, but no matches (maybe a file was deleted from the index)

echo "#########################################"
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"${FACTION1_CREATE_TABLE}\""
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('${SRCDIR}', 'd', '17', 'faction1 root directory');\""
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('old_file', 'f', '17', 'faction1 old file data');\""
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('1MB', 'f', '17', 'faction1 1MB file');\""
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('repeat_name', 'f', '17', 'faction1 repeat_name');\""
echo "#########################################"
run_no_sort "${SQLITE3} \"${SRCDIR}/directory/${FACTION1_DB}\" \"${FACTION1_CREATE_TABLE}\""
run_no_sort "${SQLITE3} \"${SRCDIR}/directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('directory', 'd', '7', 'faction1 directory');\""
run_no_sort "${SQLITE3} \"${SRCDIR}/directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('executable', 'f', '7', 'faction1 executable file');\""
echo "#########################################"
run_no_sort "${SQLITE3} \"${SRCDIR}/leaf_directory/${FACTION1_DB}\" \"${FACTION1_CREATE_TABLE}\""
run_no_sort "${SQLITE3} \"${SRCDIR}/leaf_directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('no match', 'f', '', 'this should not show up in the index');\""
run_no_sort "${SQLITE3} \"${SRCDIR}/leaf_directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('leaf_file1', 'f', '13', 'faction1 leaf file 1');\""
echo "#########################################"
echo
echo "#########################################"
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION2_DB}\" \"${FACTION2_CREATE_TABLE}\""
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION2_DB}\" \"INSERT INTO ${TABLE} VALUES ('${SRCDIR}', 'd', '17', 'faction2 root directory');\""
run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION2_DB}\" \"INSERT INTO ${TABLE} VALUES ('1KB', 'f', '17', 'faction2 1KB file');\""
echo "#########################################"
run_no_sort "${SQLITE3} \"${SRCDIR}/directory/subdirectory/${FACTION2_DB}\" \"${FACTION2_CREATE_TABLE}\""
run_no_sort "${SQLITE3} \"${SRCDIR}/directory/subdirectory/${FACTION2_DB}\" \"INSERT INTO ${TABLE} VALUES ('subdirectory', 'd', '6', 'faction2 subdirectory');\""
echo "#########################################"
echo

run_sort "find \"${SRCDIR}\""

run_no_sort "${GUFI_DIR2INDEX} -x -q \"${FACTION1_DB}\" \"faction1\" -q \"${FACTION2_DB}\" \"faction2\" \"${SRCDIR}\" \"${SEARCH}\"" | remove_indexing_time

# fix timestamps
"${SQLITE3}" "${INDEXROOT}/db.db"                        "UPDATE summary SET mtime = '17';"
"${SQLITE3}" "${INDEXROOT}/directory/db.db"              "UPDATE summary SET mtime = '7';"
"${SQLITE3}" "${INDEXROOT}/directory/subdirectory/db.db" "UPDATE summary SET mtime = '6';"
"${SQLITE3}" "${INDEXROOT}/leaf_directory/db.db"         "UPDATE summary SET mtime = '13';"

clean_index "${INDEXROOT}" 0

# output from these point to the source tree, not the index
# (output was mangled with test text cleanup)
SELECT_EXTERNAL_DBS="SELECT filename, attachname FROM external_dbs;"
run_sort "${SQLITE3} \"${INDEXROOT}/db.db\"                        \"${SELECT_EXTERNAL_DBS}\""
run_sort "${SQLITE3} \"${INDEXROOT}/directory/db.db\"              \"${SELECT_EXTERNAL_DBS}\""
run_sort "${SQLITE3} \"${INDEXROOT}/directory/subdirectory/db.db\" \"${SELECT_EXTERNAL_DBS}\""
run_sort "${SQLITE3} \"${INDEXROOT}/leaf_directory/db.db\"         \"${SELECT_EXTERNAL_DBS}\""

echo "# insert an external db that should not show up in queries"
run_no_sort "${SQLITE3} \"${INDEXROOT}/leaf_directory/db.db\" \"INSERT INTO external_dbs_pwd (type, filename, attachname) VALUES ('user_db', 'no match', 'this should not show up when querying');\""

echo "# create empty template for providing default data"
run_no_sort "${SQLITE3} \"${FACTION1_TEMPLATE_DB}\" \"${FACTION1_CREATE_TABLE}\""
echo "# create empty template for providing default data"
run_no_sort "${SQLITE3} \"${FACTION2_TEMPLATE_DB}\" \"${FACTION2_CREATE_TABLE}\""

do_tests

run_no_sort "${GUFI_ROLLUP} \"${INDEXROOT}\"" | sed '/Started/d; /Took /d;'

run_sort "${SQLITE3} \"${INDEXROOT}/db.db\" \"SELECT * FROM external_dbs;\""
run_sort "${SQLITE3} \"${INDEXROOT}/db.db\" \"SELECT * FROM external_dbs_pwd;\""
run_sort "${SQLITE3} \"${INDEXROOT}/db.db\" \"SELECT * FROM external_dbs_rollup;\""

do_tests
) |& tee "${OUTPUT}"

@DIFF@ @CMAKE_CURRENT_BINARY_DIR@/external_databases.expected "${OUTPUT}"
rm "${OUTPUT}"
